/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.risc.server;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;

import edu.duke.ece651.risc.shared.JSONSerializer;
import edu.duke.ece651.risc.shared.ServerPlayer;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.atLeastOnce;

class AppTest {
  App app;

  @BeforeEach
  public void init() {
    MockitoAnnotations.openMocks(this);
    app = new App(hs, mockOut);
  }

  @Mock
  private PrintStream mockOut;

  @Mock
  private ServerSocket ss;

  @Mock
  private ServerSocket hs;

  @Mock
  private ServerPlayer player;

  @Test
  void test_start_new_game() throws IOException {
    Socket s = new Socket();
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    ServerPlayer sp = new ServerPlayer(new BufferedReader(new StringReader("2\n")),
            new PrintWriter(bytes, true),s);
    sp.setName("p");
    ObjectMapper mapper = new ObjectMapper();
    JsonNode rootNode = mapper.readTree("{\"type\":\"start\",\"name\":\"test\",\"gameSize\":\"2\"}");
    Game g = app.startNewGame(sp,rootNode);
    assertEquals(2,g.getPlayerNum());
  }

 
  @Test
  void test_print_available_gameList() throws IOException {
    Socket socket1 = new Socket();      
    ByteArrayOutputStream bytes1 = new ByteArrayOutputStream();   
    ServerPlayer p1 = app.createOrUpdatePlayer("Red",new BufferedReader(new StringReader("")),new PrintWriter(bytes1, true),socket1);
    Socket socket2 = new Socket();      
    ByteArrayOutputStream bytes2 = new ByteArrayOutputStream();   
    Socket socket3 = new Socket();      
    ByteArrayOutputStream bytes3 = new ByteArrayOutputStream();   
    ServerPlayer p2 = app.createOrUpdatePlayer("Blue",new BufferedReader(new StringReader("")),new PrintWriter(bytes2, true),socket2);   
    ObjectMapper mapper = new ObjectMapper();
    JsonNode rootNode = mapper.readTree("{\"type\":\"start\",\"name\":\"test\",\"gameSize\":\"3\"}");                                                                                           
    Game g1 = app.startNewGame(p1,rootNode);
    Game g2 = app.startNewGame(p2,rootNode);
    assertEquals("[{\"id\":1,\"players\":[\"Blue\"]}]\n[{\"id\":0,\"players\":[\"Red\"]}]", app.allGameList("Red"));
    app.createOrUpdatePlayer("Blue",new BufferedReader(new StringReader("")),new PrintWriter(bytes3, true),socket3);
    assertDoesNotThrow(()->{p2.sendMessage("msg");});
  }

  @Test
  void test_join_exist_game() throws IOException {
    Socket s = new Socket();
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    ServerPlayer sp = new ServerPlayer(new BufferedReader(new StringReader("")),
            new PrintWriter(bytes, true),s);
    sp.setName("sp");
    Socket s1 = new Socket();
    ByteArrayOutputStream bytes1 = new ByteArrayOutputStream();
    ServerPlayer sp1 = new ServerPlayer(new BufferedReader(new StringReader("")),
            new PrintWriter(bytes1, true),s1);
    sp1.setName("sp1");
    ObjectMapper mapper = new ObjectMapper();
    JsonNode rootNode = mapper.readTree("{\"type\":\"start\",\"name\":\"test\",\"gameSize\":\"2\"}");
    app.startNewGame(sp, rootNode);
    JsonNode rootNode1 = mapper.readTree("{\"type\":\"join\",\"name\":\"p2\",\"gameID\":\"0\"}");
    app.joinAndRun(sp1, rootNode1);
    assertEquals(0,app.games.get(0).getGameID());
    assertEquals(2,app.games.get(0).getAllPlayers().size());
  }

  @Test
  public void test_rejoinGame() throws IOException{
    Socket s = new Socket();
    Socket s1 = new Socket();
    Socket s2 = new Socket();
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    ByteArrayOutputStream bytes1 = new ByteArrayOutputStream();
    ByteArrayOutputStream bytes2 = new ByteArrayOutputStream();
    ServerPlayer sp = new ServerPlayer(new BufferedReader(new StringReader("")),new PrintWriter(bytes, true),s);
    sp.setName("A");
    ServerPlayer sp1 = new ServerPlayer(new BufferedReader(new StringReader("")),new PrintWriter(bytes1, true),s1);
    sp1.setName("B");
    ServerPlayer sp2 = new ServerPlayer(new BufferedReader(new StringReader("")),new PrintWriter(bytes2, true),s2);
    sp2.setName("C");
    ObjectMapper mapper = new ObjectMapper();
    JsonNode rootNode = mapper.readTree("{\"type\":\"start\",\"name\":\"A\",\"gameSize\":\"2\"}");
    JsonNode rejoinReq = mapper.readTree("{\"type\":\"rejoin\",\"name\":\"A\",\"gameID\":\"0\"}");
    Game g = app.startNewGame(sp, rootNode);
    g.addPlayer(sp1);
    g.makeMap(2);
    Game g1 = app.startNewGame(sp, rootNode);
    g1.addPlayer(sp2);
    g1.makeMap(2);
    app.rejoinGame(sp, rejoinReq);
    assertEquals(false, g.checkWin());
    assertEquals(false, g.checkLost(sp));
    assertEquals(false, g1.checkWin());
    assertEquals(false, g1.checkLost(sp));
    assertEquals(0,sp.getCurrentGame());
  }

  @Test
  void test_accept_player_start() throws IOException, InterruptedException {
    Socket cs = Mockito.mock(Socket.class);
    String clientIn = "{\"type\":\"start\",\"name\":\"test\",\"gameSize\":\"3\"}\n";
    OutputStream out = getMockClientOuput(cs, clientIn);
    Mockito.when(ss.accept()).thenReturn(cs);
    app.recoverPlayers();
    app.recoverGames();
    Thread t = new Thread(() -> {
      try {
        app.acceptPlayers(ss);
      } catch (NullPointerException ignored) {
      }
    });
    t.start();
    // wait for "acceptPlayers" finishing
    Thread.sleep(2000);
    // check the player's out - it should have sth???
    assertEquals("",out.toString());
    // end the acceptPlayers
    t.interrupt();
    t.join();
  }

  @Test
  public void test_accpet_players_getGameList() throws InterruptedException, IOException{
    Socket cs = Mockito.mock(Socket.class);
    String clientIn = "{\"type\":\"getGameList\",\"name\":\"test\"}\n";
    OutputStream out = getMockClientOuput(cs, clientIn);
    Mockito.when(ss.accept()).thenReturn(cs);
    app.recoverPlayers();
    app.recoverGames();
    Thread t = new Thread(() -> {
      try {
        app.acceptPlayers(ss);
      } catch (NullPointerException ignored) {
      }
    });
    t.start();
    // wait for "acceptPlayers" finishing
    Thread.sleep(2000);
    assertEquals("[]\n[]\n",out.toString());
    t.interrupt();
    t.join();
  }

  @Test
  public void test_accpet_players_join() throws InterruptedException, IOException{
    Socket cs = Mockito.mock(Socket.class);
    String clientIn = "{\"type\":\"join\",\"name\":\"test\",\"gameID\":\"0\"}\n";
    OutputStream out = getMockClientOuput(cs, clientIn);
    Mockito.when(ss.accept()).thenReturn(cs);
    app.recoverPlayers();
    app.recoverGames();
    Game g = new Game(2,0);
    app.games.add(g);
    Thread t = new Thread(() -> {
      try {
        app.acceptPlayers(ss);
      } catch (NullPointerException ignored) {
      }
    });
    t.start();
    // wait for "acceptPlayers" finishing
    Thread.sleep(2000);
    assertEquals("You are in a Game now!\n",out.toString());
    t.interrupt();
    t.join();
  }

  @Test
  private OutputStream getMockClientOuput(Socket cs, String clientIn) throws IOException {
    InputStream in = new ByteArrayInputStream(clientIn.getBytes());
    OutputStream out = new ByteArrayOutputStream();
    Mockito.when(cs.getInputStream()).thenReturn(in);
    Mockito.when(cs.getOutputStream()).thenReturn(out);
    return out;
  }

  @Test
  void test_accept_player_exception_handling() throws IOException, InterruptedException {
    Socket cs = Mockito.mock(Socket.class);
    String clientIn = "3\n";
    OutputStream out = getMockClientOuput(cs, clientIn);
    Mockito.when(ss.accept()).thenReturn(cs).thenThrow(new IOException("test"));
    Thread t = new Thread(() -> {
      app.acceptPlayers(ss);
    });
    t.start();
    // wait for "acceptPlayers" finishing
    Thread.sleep(1000);
    // should print IOEexception in server's app
    Mockito.verify(mockOut, atLeastOnce()).println(anyString());
    t.interrupt();
    t.join();
  }

  @Test
  void test_allGameList() throws IOException{
    Socket s = new Socket();
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    ServerPlayer sp = new ServerPlayer(new BufferedReader(new StringReader("")),
            new PrintWriter(bytes, true),s);
    sp.setName("Red");
    ObjectMapper mapper = new ObjectMapper();
    JsonNode rootNode = mapper.readTree("{\"type\":\"start\",\"name\":\"test\",\"gameSize\":\"3\"}");
    app.startNewGame(sp,rootNode);
    String str = app.allGameList(sp.getName());
    assertEquals("[]\n[{\"id\":0,\"players\":[\"Red\"]}]",str);
  }

  @Test
  public void test_gameCanPlace(){
    ServerPlayer sp1 = new ServerPlayer();
    ServerPlayer sp2 = new ServerPlayer();
    sp1.setCurrentGameID(0);
    sp2.setCurrentGameID(1);
    Game g = new Game(2,0);
    g.addPlayer(sp1);
    g.addPlayer(sp2);
    assertEquals(false, app.gameCanPlace(g));
    sp2.setCurrentGameID(0);
    assertEquals(true, app.gameCanPlace(g));
  }

  @Test
  public void test_recoverGame(){
    assertDoesNotThrow(()->{app.recoverPlayers();});
    assertDoesNotThrow(()->{app.recoverGames();});     
  }

  @Test
  public void test_Database() {
      Database db = new Database();
      ServerPlayer sp = new ServerPlayer();
      sp.setName("test");
      Game g = new Game(2,0);
      db.insertPlayersCollection(sp);
      db.insertGamesCollection(g);
      ArrayList<Game> gl = db.recoverGameList();
      ArrayList<ServerPlayer> spl = db.recoverPlayerList();
      assertEquals(1, gl.size());
      assertEquals(1, spl.size());
  }
  

}
