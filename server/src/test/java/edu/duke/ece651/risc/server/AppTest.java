/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.risc.server;

import edu.duke.ece651.risc.shared.ServerPlayer;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.atLeastOnce;

class AppTest {
  App app;

  @BeforeEach
  public void init() {
    MockitoAnnotations.initMocks(this);
    app = new App(hs, mockOut);
  }

  @Mock
  private PrintStream mockOut;

  @Mock
  private ServerSocket ss;

  @Mock
  private HostSocket hs;

  @Mock
  private ServerPlayer player;

  /*@Disabled
  @Test
  void test_start_new_game() throws IOException {
    Socket s = new Socket();
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    ServerPlayer sp = new ServerPlayer(new BufferedReader(new StringReader("2\n")),
            new PrintWriter(bytes, true),s);
    app.startNewGame(sp);
    assertEquals("Hi ^_^, We will create a new game for you. How many players do you want to have in your Game?\n" +
            "You are in a Game now!\n" +
            "Red\n", bytes.toString());
  }

  @Disabled
  @Test
  void test_get_available_game() throws IOException {
    Mockito.when(player.readGameSize()).thenReturn(3);
    app.startNewGame(player);
    assertEquals(1, app.getAvailableGames().size());
  }

  @Disabled
  @Test
  void test_print_available_gameList() throws IOException {
    Mockito.when(player.readGameSize()).thenReturn(3);
    app.startNewGame(player);
    assertEquals("The available games you can choose from are: Game ID: 0 ", app.AvailableGameList());
  }

  @Disabled
  @Test
  void test_join_exist_game() throws IOException {
    Socket s = new Socket();
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    ServerPlayer sp = new ServerPlayer(new BufferedReader(new StringReader("a\n1\n0\n")),
            new PrintWriter(bytes, true),s);
    Mockito.when(player.readGameSize()).thenReturn(2);
    Game g = app.startNewGame(player);
    assertEquals(g, app.joinExistingGame(sp));
    assertEquals(0, app.getAvailableGames().size());
  }

  @Test
  void test_accept_player() throws IOException, InterruptedException {
    Socket cs = Mockito.mock(Socket.class);
    Socket cs1 = Mockito.mock(Socket.class);
    Socket cs2 = Mockito.mock(Socket.class);
    String clientIn = "3\n";
    String clientIn1 = "s\n3\n";
    String clientIn2 = "j\n0\n";
    OutputStream out = getMockClientOuput(cs, clientIn);
    OutputStream out1 = getMockClientOuput(cs1, clientIn1);
    OutputStream out2 = getMockClientOuput(cs2, clientIn2);
    Mockito.when(ss.accept()).thenReturn(cs).thenReturn(cs1).thenReturn(cs2);
    Thread t = new Thread(() -> {
      try {
        app.acceptPlayers(ss);
      } catch (NullPointerException ignored) {
      }
    });
    t.start();
    // wait for "acceptPlayers" finishing
    Thread.sleep(5000);
    // check the player's out - it should have sth???
    assertEquals("Hi, there's no available game in the system, so we will start a game for you.\n"+
    "Hi ^_^, We will create a new game for you. How many players do you want to have in your Game?\n"+
    "You are in a Game now!\n"+
    "Red\n"+
    "Hi, Do you want to start a new game(type s) or join an existing game(type j)?\n"+
    "Successfully choose an action!\n"+
    "Hi ^_^, We will create a new game for you. How many players do you want to have in your Game?\n"+
    "You are in a Game now!\n"+
    "Red\n"+
    "Hi, Do you want to start a new game(type s) or join an existing game(type j)?\n"+
    "Successfully choose an action!\n"+
    "The available games you can choose from are: Game ID: 0 Game ID: 1 \n"+
    "You are in a Game now!\n"+
    "Blue\n"+
    "Hi, Do you want to start a new game(type s) or join an existing game(type j)?\n", out.toString()+out1.toString()+out2.toString());
    // end the acceptPlayers
    t.interrupt();
    t.join();
  }



  private OutputStream getMockClientOuput(Socket cs, String clientIn) throws IOException {
    InputStream in = new ByteArrayInputStream(clientIn.getBytes());
    OutputStream out = new ByteArrayOutputStream();
    Mockito.when(cs.getInputStream()).thenReturn(in);
    Mockito.when(cs.getOutputStream()).thenReturn(out);
    return out;
  }

  @Test
  void test_accept_player_exception_handling() throws IOException, InterruptedException {
    Socket cs = Mockito.mock(Socket.class);
    String clientIn = "3\n";
    OutputStream out = getMockClientOuput(cs, clientIn);
    Mockito.when(ss.accept()).thenReturn(cs).thenThrow(new IOException("test"));
    Thread t = new Thread(() -> {
      app.acceptPlayers(ss);
    });
    t.start();
    // wait for "acceptPlayers" finishing
    Thread.sleep(1000);
    // should print IOEexception in server's app
    Mockito.verify(mockOut, atLeastOnce()).println(anyString());
    t.interrupt();
    t.join();
  }

  @Test
  void test_run() throws IOException, InterruptedException {
    // prep
    Socket cs = Mockito.mock(Socket.class);
    String clientIn = "3\n";
    Mockito.when(ss.accept()).thenReturn(cs).thenThrow(new IOException("test"));
    OutputStream out = getMockClientOuput(cs, clientIn);
    Mockito.when(hs.getSocket()).thenReturn(ss);
    // start
    app = new App(hs, mockOut);
    Thread t = new Thread(() -> {
      app.run();
    });
    t.start();
    Thread.sleep(2000);
    t.interrupt();
    t.join();
    Mockito.verify(hs).getSocket();
    Mockito.verify(hs).closeSocket();
  }*/

  @Test
  void test_allGameList() throws IOException{
    Socket s = new Socket();
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    ServerPlayer sp = new ServerPlayer(new BufferedReader(new StringReader("")),
            new PrintWriter(bytes, true),s);
    sp.setName("Red");
    app.startNewGame(sp,3);
    String str = app.allGameList(sp.getName());
    assertEquals("[{\"0\":[\"Red\"]},{\"0\":[\"Red\"]}]",str);
  }
}
