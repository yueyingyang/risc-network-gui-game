/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.risc.server;

import java.io.*;
import java.net.Socket;
import java.util.ArrayList;

import edu.duke.ece651.risc.shared.Player;
import edu.duke.ece651.risc.shared.ServerPlayer;
import edu.duke.ece651.risc.shared.Constant;

public class App {
    ArrayList<Game> games;
    HostSocket hostSocket;
    PrintStream output;

    /**
     * the constructor of App build the socket based on the portnumber initialize
     * the games list
     */
    public App() {
        games = new ArrayList<Game>();
        int portNumber = 4444;
        this.hostSocket = new HostSocket(portNumber);
        this.output = System.out;
    }

    /**
     * 
     * @return the list of available games for a player ro join
     */
    private ArrayList<Game> getAvailablGames() {
        ArrayList<Game> res = new ArrayList<Game>();
        for (Game g : this.games) {
            if (g.isGameFull() == false) {
                res.add(g);
            }
        }
        return res;
    }

    /**
     * start a new game for a user
     * 
     * @param player
     * @throws IOException
     */
    public void startNewGame(Player player) throws IOException {
        player.sendMessage(Constant.ASK_HOW_MANY_PLAYERS);
        while (true) {
            try {
                String s = player.recvMessage();
                int playerNum = Integer.parseInt(s);
                if (playerNum < 2 || playerNum > 5) {
                    player.sendMessage(Constant.IMPROPER_NUMBER);
                    continue;
                }
                player.sendMessage(Constant.SUCCESS_NUMBER_CHOOSED);
                Game newGame = new Game(playerNum);
                if (newGame.addPlayer(player).equals("")) {
                    player.sendMessage(player.getName()); // send name to client player
                    this.games.add(newGame);
                    break;
                }
            } catch (NumberFormatException e) {
                player.sendMessage(Constant.INVALID_NUMBER);
            }
        }
    }

    /**
     * let the player join into an existing game
     * 
     * @param player
     * @throws IOException
     */
    public void joinExistingGame(Player player) throws IOException {
        // send the available games to user to choose from
        StringBuilder sb = new StringBuilder(Constant.AVAILABLE_LIST_INFO);
        ArrayList<Game> availableGames = this.getAvailablGames();
        for (int i = 0; i < availableGames.size(); i++) {
            sb.append(Integer.toString(games.indexOf(availableGames.get(i))));
            sb.append(" ");
        }
        String availables = sb.toString();
        player.sendMessage(availables);
        // wait util the user give a valid game number
        while (true) {
            try {
                int chosenGame = Integer.parseInt(player.recvMessage());
                if (chosenGame >= this.games.size()) {
                    player.sendMessage(Constant.OUT_OF_RANGE_CHOICE);
                    continue;
                }
                String msg = games.get(chosenGame).addPlayer(player);
                if (msg.equals("")) {
                    player.sendMessage(Constant.SUCCESS_NUMBER_CHOOSED);
                    player.sendMessage(player.getName()); // send name to client player
                    break;
                } else {
                    player.sendMessage(msg);
                }
            } catch (NumberFormatException e) {
                player.sendMessage(Constant.INVALID_NUMBER);
            }
        }
    }

    /**
     * continously accept connections and initialize players the player will be
     * asked whether he/she want to start a new game or join a game
     * 
     * @throws IOException
     */
    public void acceptPlayers() throws IOException {
        while (true) {
            try {
                // accpet a new connection and create a new player based on that
                Socket clientSocket = this.hostSocket.getSocket().accept();
                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                Player player = new ServerPlayer(in, out);
                // let the player choose whether to join a game or start a new one
                // when there are existing games

                if (this.getAvailablGames().size() > 0) {
                    player.sendMessage(Constant.ASK_START_NEW_OR_JOIN);
                    while (true) {
                        String action = in.readLine();
                        if (action.equals("s")) {
                            player.sendMessage(Constant.SUCCESS_ACTION_CHOOSED);
                            startNewGame(player);
                            break;
                        } else if (action.equals("j")) {
                            player.sendMessage(Constant.SUCCESS_ACTION_CHOOSED);
                            joinExistingGame(player);
                            break;
                        } else {
                            player.sendMessage(Constant.NOR_JOIN_START);
                        }
                    }

                } else { // when there's no existing games
                    player.sendMessage(Constant.NO_GAME_AVAILABLE_INFO);
                    startNewGame(player);
                }
            } catch (IOException e) {
                this.output.println("Exception caught when listening for a connection");
                this.output.println(e.getMessage());
            }
        }
    }

    /**
     * The main function to run
     * 
     * @param args
     */
    public static void main(String[] args) throws IOException {

        App myapp = new App();

        myapp.acceptPlayers();

        // close socket
        myapp.hostSocket.closeSocket();
    }

}
