/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.risc.client;

import edu.duke.ece651.risc.shared.ActionEntry;
import edu.duke.ece651.risc.shared.ClientPlayer;
import edu.duke.ece651.risc.shared.Constant;
import edu.duke.ece651.risc.shared.GameMap;

import java.io.*;
import java.net.Socket;
import java.util.Properties;

public class App {


  private final Socket socket;
  private final ClientPlayer player;

  public App(Socket s, BufferedReader userIn, PrintStream userOut) throws IOException {
    this.socket = s;
    player = new ClientPlayer(new BufferedReader(new InputStreamReader(s.getInputStream())),
            new PrintWriter(s.getOutputStream(), true), userIn, userOut);
  }

  public void loginGame() throws IOException {
    player.loginGame();
    player.display("Please wait for the game to start!");
  }

  public void endGame() throws IOException {
    socket.close();
  }

  public void run() throws IOException {
    // login game: join an existed game / start a new game
    this.loginGame();
    this.placementPhase();
    this.attackPhase();
    this.endGame();
  }

  private void attackPhase() throws IOException {
    while (true) {
      player.playOneTurn();
      player.display("Please wait for combat resolution...");
      // recv combat result
      String turnRes = player.recvMessage();
      if (turnRes.equals(Constant.LOSE_GAME) || turnRes.equals(Constant.GAME_OVER)) {
        player.display(turnRes);
        // can choose watch or disconnect
        break;
      }
    }
  }

  private void placementPhase() throws IOException {
    player.placementPhase();
  }

  public static void main(String[] args) throws IOException {
    // load a properties file
    InputStream propFileInputStream = App.class.getClassLoader().getResourceAsStream("config.properties");
    Properties prop = new Properties();
    prop.load(propFileInputStream);

    // init socket
    String hostName = prop.getProperty("server.hostname");
    int portNumber = Integer.parseInt(prop.getProperty("server.port"));
    Socket s = new Socket(hostName, portNumber);
    BufferedReader userIn = new BufferedReader(new InputStreamReader(System.in));
    App app = new App(s, userIn, System.out);
    app.run();
  }
}
